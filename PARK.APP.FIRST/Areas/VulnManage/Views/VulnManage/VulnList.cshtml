@model PARK.APP.FIRST.Areas.VulnManage.Controllers.VulnManageController.VulnViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.Bootstrap.TagHelpers
@{
    ViewData["Title"] = Model.pageDefault.Title;
    ViewData["Theme"] = Model.pageDefault.Theme;//"metro";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var gridModelDefault = Model.vulnModels.FirstOrDefault();
    var pageSearchModel = Model.vulnSearchModel;

    var ddl_DiagType = Model.vulnSearchModel.Diag_types;
}

<h2>@ViewData["Title"]</h2>
<div style="display:none">
    <p>https://stackoverflow.com/questions/5248183/html-partial-vs-html-renderpartial-html-action-vs-html-renderaction</p>
    <p>https://forums.asp.net/t/1845825.aspx?How+to+render+partial+views+dynamically+and+reuse+partial+views+</p>
    <p>http://www.tutorialsteacher.com/mvc/partial-view-in-asp.net-mvc</p>
    <p>https://aspdotnet.tistory.com/1468?category=231675</p>
    <p>google : asp.net core jquery in partialview</p>
    <p>https://www.youtube.com/watch?v=fCTikAZVRFM</p>
    <p>https://www.youtube.com/watch?v=0Re7kDJ0vLA</p>
    <p>https://www.youtube.com/watch?v=uiIHNHfQIyE</p>
    <p>https://forums.asp.net/t/2146232.aspx?adding+a+partial+view+record+using+jquery+ajax+and+asp+net+core</p>
    <p>https://code-maze.com/aspnetcore-webapi-best-practices/</p>
    <p>
        Clean Architecture...
    </p>
    http://docs.automapper.org/en/stable/Getting-started.html
    https://blog.aliencube.org/ko/2015/03/24/introducing-automapper/
    https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/common-web-application-architectures
    https://rnowif.github.io/blog/2018/10/22/asp-dot-net-clean-architecture/
    https://github.com/rnowif/Expenses/tree/master/Expenses
    https://chsakell.com/2015/02/15/asp-net-mvc-solution-architecture-best-practices/
    https://github.com/chsakell/mvcarchitecture
    https://paulovich.net/2018/05/15/clean-architecture-for-net-applications/
    https://github.com/ivanpaulovich/clean-architecture-manga
    https://aspdotnet.tistory.com/1783
    https://m.blog.naver.com/PostView.nhn?blogId=islove8587&logNo=221029900556&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F
</div>
@using (Html.BeginForm("VulnList", "VulnManage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="table-responsive">
        <table class="table">
            <tbody>
                <tr>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Comp_name)
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.vulnSearchModel.Comp_name, new { placeholder = "Comp_name", @class = "form-control" })
                    </td>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Group_name)
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.vulnSearchModel.Group_name, new { placeholder = "Group_name", @class = "form-control" })
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Vuln_name)
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.vulnSearchModel.Vuln_name, new { placeholder = "Vuln_name", @class = "form-control" })
                    </td>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Manage_id)
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.vulnSearchModel.Manage_id, new { placeholder = "Manage_id", @class = "form-control" })
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Exception_yn)
                    </td>
                    <td>
                        <input type="radio" asp-for="vulnSearchModel.Exception_yn" value="Y" />Y
                        <input type="radio" asp-for="vulnSearchModel.Exception_yn" value="N" checked />N
                    </td>
                    <td style="vertical-align:bottom">
                        @Html.LabelFor(m => m.vulnSearchModel.Diag_type)
                    </td>
                    <td>
                        <select asp-for="vulnSearchModel.Diag_type" asp-items="@(new SelectList(ddl_DiagType, "CodeId","CodeName"))" class="form-control">
                            <option value="" selected>전체</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        @Html.ActionLink("Refresh", "VulnList", "VulnManage", routeValues: null, htmlAttributes: new { @class = "btn btn-default btn-sm", @role = "button" })

                        <bootstrap-button type="button" class="btn btn-primary btn-sm" bootstrap-toggle-modal="index_03_Modal">
                            Open sample modal
                        </bootstrap-button>
                    </td>
                    <td colspan="2" style="text-align:right">
                        <button type="button" class="btn btn-primary btn-sm" data-toggle="ajax-modal" data-target="#popupVulnEdit" data-url="@Url.Action("PopupTvulnManageEdit", "TvulnManage", new { Area="VulnManage", id = 2001 })">
                            CREATE(Modal)
                        </button>

                        @Html.ActionLink("CREATE(LINK)", "VulnCreate", "VulnManage", routeValues: null, htmlAttributes: new { @class = "btn btn-default btn-sm", @role = "button" })

                        <bootstrap-button type="submit" class="btn btn-default btn-sm">
                            SEARCH
                        </bootstrap-button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}
<div id="modal-placeholder"></div>
<div style="display:none">
    <p>
        <button type="button" class="btn btn-primary btn-sm" id="partialView11">
            Open PartialView
        </button>
        <div class="modal fade" id="myModal" role="dialog" data-url=""></div>
    </p>
</div>
<bootstrap-modal id="index_03_Modal" aria-labelledby="myModalLabel" class="modal-dialog modal-lg">
    <bootstrap-modal-header>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title">Sample modal header</h4>
    </bootstrap-modal-header>
    <bootstrap-modal-body>
        <p>
            Razor Page & Dapper & Repository Pattern :<br />https://www.c-sharpcorner.com/article/crud-operations-in-asp-net-core-2-razor-page-with-dapper-and-repository-pattern/
        </p>
        <p>
            Dapper & Web API :<br />https://www.c-sharpcorner.com/article/asp-net-core-web-api-with-dapper-and-vs-2017/
        </p>
        <p>
            Dapper & Web API :<br />https://www.jeremymorgan.com/blog/programming/how-to-dapper-web-api/
        </p>
        <p>
            Dapper Tutorial :<br />https://dapper-tutorial.net/execute
        </p>
        <p>
            EF Core & Procedure :<br />https://www.sinclairinat0r.com/2017/05/06/entity-framework-core--mapping-stored-procedures,-fluently
        </p>
        <p>
            EF Core & Procedure :<br />https://github.com/snickler/EFCore-FluentStoredProcedure
        </p>
        <p>
            EF Core & Procedure :<br />https://expertcodeblog.wordpress.com/2018/01/04/entity-framework-net-core-2-0-execute-and-mapping-stored-procedures/
        </p>
        <p>
            Dapper : https://www.c-sharpcorner.com/article/crud-operation-in-asp-net-core-2-0-using-dapper-orm/
        </p>
        <p>
            IConfiguration Connection String :<br />https://stackoverflow.com/questions/9218847/how-do-i-handle-database-connections-with-dapper-in-net
        </p>
        <p>
            * Dapper Helper :<br />http://www.nullskull.com/a/10399923/sqlmapperhelper--a-helper-class-for-dapperdotnet.aspx
        </p>
        <p>
            * Dapper Helper & Procedure(Error SP) :<br />https://m.blog.naver.com/PostView.nhn?blogId=wolfre&logNo=220597602977&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F
        </p>
        <p>
            * Dapper Helper & Procedure(Error SP) :<br />https://m.blog.naver.com/wolfre/220600866032
        </p>
        <p>
            Using Dapper Asynchronously in ASP.NET Core 2.1 :<br />https://exceptionnotfound.net/using-dapper-asynchronously-in-asp-net-core-2-1/
        </p>
        <p>
            Dapper :<br />https://medium.com/dapper-net/get-started-with-dapper-net-591592c335aa
        </p>
        <p>
            Web API Application with Dapper :<br />https://dotnetcorecentral.com/blog/asp-net-core-web-api-application-with-dapper-part-2/
        </p>
        <input type="button" onclick="alertTest('Test')" id="file_AlertTest" value="Test" />
    </bootstrap-modal-body>
    <bootstrap-modal-footer>
        Modal
    </bootstrap-modal-footer>
</bootstrap-modal>
<div class="modal fade" id="myModal2" role="dialog" data-url="" tabindex="-1" aria-labelledby="addContactLabel" aria-hidden="true"></div>
@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#partialView11').click(function () {
                var url = $('#myModal').data('url');
                $.get(url, function (data) {
                    $("#myModal").html(data);
                    $("#myModal").modal('show');
                });
            });
        });

        var buttonclick = function (event) {
            var id = event.target.id;
            alert("tttt : " + id);
        }

        $("input[id^='file_']").jqxButton({ theme: 'metro' });

        // https://www.jqwidgets.com/jquery-widgets-documentation/documentation/jqxgrid/jquery-grid-cellsrendering.htm
        var cellsrenderer_default = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.VulnSeq;
            return '<input class="btn btn-danger" style="width:100%; height:100%;" type="button" onClick="cellsrenderer_default_fn(\'' + str_args + '\')" id="btn_' + rowdata.VulnSeq + '" value="index : ' + index + '"/>'
        }

        var cellsrenderer_p01 = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.VulnSeq;
            return '<div style="text-align:center;"><input class="btn btn-info" style="width:100%; height:100%;" type="button" onClick="cellsrenderer_default_fn01(\'' + str_args + '\')" id="btn_' + rowdata.VulnSeq + '" value="Edit"/></div>'
        }

        //https://www.jqwidgets.com/jquery-widgets-demo/demos/jqxgrid/customcolumn.htm?classic
        var cellsrenderer_p099 = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.VulnSeq;
            var url = '@Url.Action("VulnEdit", "VulnManage", new { Area = "VulnManage", vulnSeq = "param1" })';
            url = url.replace("param1", str_args);
            //"<div style='margin: 6px 0px 0px 15px;'><a class="btn btn-success" style="width:80%; height:50%;" href='http://www.jqwidgets.com'>" + value + "</a></div>"
            //return '<div style="text-align:center;"><input class="btn btn-info" style="width:80%; height:50%;" type="button" onClick="cellsrenderer_default_fn01(\'' + str_args + '\')" id="btn_' + rowdata.VulnSeq + '" value="info"/></div>'
            return '<div style="text-align:center;"><a class="btn btn-success" style="width:100%; height:100%;" href="' + url + '">' + 'Edit' + '</a></div>';
        }

        var cellsrenderer_default2 = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.VulnSeq;
            return '<input class="btn btn-danger" style="width:80%; height:80%;" type="button" onClick="cellsrenderer_default_fn(\'' + str_args + '\')" id="btn_' + rowdata.VulnSeq + '" value="' + rowdata.VulnSeq + '"/>'
        }

        var cellsrenderer_default_fn = function (value) {
            alert("rowdata.Key 1111 : " + value);
        }

        var cellsrenderer_default_fn01 = function (value) {
            //var url = $('#myModal2').data('url');
            //https://www.jasoncavett.com/blog/using-the-url-action-helper-with-javascript-variables/
            var url = '@Url.Action("PopupVulnManageEdit", "VulnManage", new { Area = "VulnManage", vulnSeq = "param1" })';
            url = url.replace("param1", value);
            $.get(url, function (data) {
                $("#myModal2").html(data);
                $("#myModal2").modal('show');
            });
        }

        var cellsrenderer_btn = function (index, datafield, value, defaultvalue, column, rowdata) {
            return 'Edit'
        }

        var cellsbuttonclick_btn = function (rowdata) {
            alert("3333 : xxx");
        }

        function cloneObject(obj) {
            if (obj == null || typeof (obj) != 'object')
                return obj;

            var temp = new obj.constructor();
            for (var key in obj)
                temp[key] = cloneObject(obj[key]);

            return temp;
        }

        var template = { rowDetails: "<div style=\"margin: 10px;\"></div>", rowDetailsHeight: 600, rowDetailsHidden: true };
        var initRowDetails = function (index, parentElement, gridElement, record) {
            var id = record.uid.toString();
            var grid = $($(parentElement).children()[0]);
            var data = [];
            var generaterow = function (i) {
                var row = {};
                row["OrderDate"] = new Date(2016, Math.floor(Math.random() * 11), Math.floor(Math.random() * 27))
                row["Quantity"] = Math.floor(Math.random() * 50)
                row["ProductName"] = record.ProductName;
                return row;
            }
            for (var i = 0; i < Math.max(10, Math.floor(Math.random() * 20)); i++) {
                var row = generaterow(i);
                data[i] = row;
            }
            var source = {
                datafields: [
                    { name: 'OrderDate', type: 'date' },
                    { name: 'Quantity', type: 'string' },
                    { name: 'ProductName', type: 'string' }
                ],
                localdata: data
            }
            var nestedGridAdapter = new $.jqx.dataAdapter(source);
            if (grid != null) {
                grid.jqxGrid({
                    source: nestedGridAdapter, width: 780, height: 200, theme: 'metro',
                    columns: [
                        { text: 'Order Date', cellsFormat: 'd', dataField: 'OrderDate', width: 200 },
                        { text: 'Quantity', cellsAlign: 'right', dataField: 'Quantity', width: 200 },
                        { text: 'Product Name', dataField: 'ProductName' }
                    ]
                });

                //grid.html("xxxxxx");
            }
        }

        function alertTest(str) {
            alert("0000 : " + str);
        }

        //$("#grid").bind('cellclick', function (event) {
        //    if (event.args.columnindex == 2) {
        //        editrow = event.args.rowindex;
        //        alert("9999 : " + editrow);
        //    };
        //});




        $(function () {
            var source = {
                id: '0',
                dataFields:
                    [
                        {
                            name: 'VulnSeq',
                            type: 'string'
                        }
                        , {
                            name: 'GroupSeq',
                            type: 'string'
                        }
                        , {
                            name: 'VulnName',
                            type: 'string'
                        }
                        , {
                            name: '',
                            type: ''
                        }
                        , {
                            name: '',
                            type: ''
                        }
                        , {
                            name: 'ManageId',
                            type: 'string'
                        }
                        , {
                            name: 'Score',
                            type: 'string'
                        }
                        , {
                            name: 'Rate',
                            type: 'string'
                        }
                        , {
                            name: 'ExceptTermType',
                            type: 'string'
                        }
                        , {
                            name: '0',
                            type: 'string'
                        }
                    ]
                , type: 'POST'
                , dataType: 'json'

                , url:"@Url.Action("GetGridVulnData_Dapper", "VulnManage", pageSearchModel)"

                , cache: false
                , formatData:
                    function (data) {
                        return { 'jsonData': JSON.stringify(data) };
                    }
                , root: 'vulnModels'
                , beforeprocessing:
                    function (data) {
                        source.totalrecords = data.vulnModesTotalCount;
                    }
                , sort:
                    function (data) {
                        $('#grid2').jqxGrid('updatebounddata', 'sort');
                    }
                , filter:
                    function (data) {
                        $('#grid2').jqxGrid('updatebounddata', 'filter');
                    }
            };

            var adapter = new $.jqx.dataAdapter(source);

            var grid = new jqxGrid(
                $('#grid2'), {
                    rowDetails: true
                    , showFilterRow: true
                    , selectionMode: 'checkbox'
                    , columnsResize: true
                    , rowDetailsTemplate: template
                    , initRowDetails: initRowDetails
                    , altRows: true
                    , filterable: true
                    , pageable: true
                    , autoHeight: true
                    , theme: 'metro'
                    , sortable: true
                    , width: '100%'
                    , columns:
                        [
                            {
                                text: 'VulnSeq'
                                , dataField: 'VulnSeq'
                                , cellsRenderer: cellsrenderer_default
                                , width: 80
                            },
                            {
                                text: 'GroupSeq'
                                , dataField: 'GroupSeq'
                                , width: 150
                            },
                            {
                                text: 'VulnName'
                                , dataField: 'VulnName'
                            },
                            {
                                text: 'test1'
                                , cellsRenderer: cellsrenderer_p01
                                , width: 80
                            },
                            {
                                text: 'test2'
                                , cellsRenderer: cellsrenderer_p01
                                , width: 80
                            },
                            {
                                text: 'ManageId'
                                , dataField: 'ManageId'
                                , width: 150
                            },
                            {
                                text: 'Score'
                                , dataField: 'Score'
                                , width: 150
                            },
                            {
                                text: 'Rate'
                                , dataField: 'Rate'
                                , width: 150
                            },
                            {
                                text: 'ExceptTermType'
                                , dataField: 'ExceptTermType'
                                , width: 150
                            }
                        ]
                    , virtualMode: true
                    , renderGridRows:
                        function (obj) {
                            return obj.data;
                        }
                    , source: adapter
                }
            );
        });
    </script>
}
    <p>https://jseditor.io/?key=grid-with-linkbutton</p>
<div id="grid" style="width:100%"></div>
<div style="display:none">
    <jqx-grid id="grid" row-details="true" show-filter-row="true" selection-mode="checkbox" columns-resize="true" row-details-template="{{template}}" init-row-details="initRowDetails()" server-processing="true" alt-rows="true" filterable="true" pageable="true" auto-height="true" source-id="@(gridModelDefault.VulnSeq)" theme="@ViewData["Theme"]" sortable="true" width="100%" source-root="vulnModels" source-total-records="vulnModesTotalCount" source-url="@Url.Action("GetGridVulnData","VulnManage", pageSearchModel)" source-model="gridModelDefault">
        <jqx-grid-columns>
            <jqx-grid-column datafield-for="@(gridModelDefault.VulnName)" text="VulnName" pinned="true"></jqx-grid-column>
            <jqx-grid-column column-group="btnRender1" width="80" text="Alert" cells-renderer="cellsrenderer_default()" datafield-for="@(gridModelDefault.VulnSeq)"></jqx-grid-column>
            <jqx-grid-column column-group="btnRender1" width="80" text="Modal" cells-renderer="cellsrenderer_p01()"></jqx-grid-column>
            <jqx-grid-column column-group="btnRender1" width="80" text="Link" cells-renderer="cellsrenderer_p099()"></jqx-grid-column>
            @*<jqx-grid-column create-widget="createWidget()" width="80" text="click" cells-renderer="cellsrenderer_btn()"></jqx-grid-column>*@
            <jqx-grid-column datafield-for="@(gridModelDefault.GroupSeq)" width="150" text="GroupSeq"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(gridModelDefault.ManageId)" width="150" text="ManageId"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(gridModelDefault.Score)" width="150" text="Score"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(gridModelDefault.Rate)" width="150" text="Rate"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(gridModelDefault.ExceptTermType)" width="150" text="ExceptTermType"></jqx-grid-column>
        </jqx-grid-columns>
        <jqx-grid-column-groups>
            <jqx-grid-column-group name="btnRender1" text="Button Render"></jqx-grid-column-group>
        </jqx-grid-column-groups>
    </jqx-grid>
</div>
<p></p>
<div id="grid2" style="width:100%"></div>