@model IEnumerable<PARK.APP.FIRST.Areas.SystemManage.Models.Menu.MenuMaster>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.Bootstrap.TagHelpers

@{
    ViewData["Title"] = "Index";
    ViewData["Theme"] = "metro";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>


@{
    var menu = Model.FirstOrDefault();
}

a tag : <a asp-action="Create" class='btn btn-default'>Create New</a>
<br />
jqx-button : <jqx-button theme="metro" on-click="@Url.Action("Create", "MenuMastersController")">Create Button</jqx-button>
<br />
button tag : <button type='button' class='btn btn-default' data-placement="top" on-click="@Url.Action("Create", "MenuMastersController")">Create Button</button>
<br />
Razor AtcionLink : @Html.ActionLink("Create Button", "Create", "MenuMasters", routeValues: null, htmlAttributes: new { @class = "btn btn-default", @role = "button" })
<br />
<div id="grid"></div>


@section scripts {
    <script type="text/javascript">
        var buttonclick = function (event) {
            var id = event.target.id;
            alert(id);
        }

        // cellsrenderer 와 columnsrenderer(?) 는 모두 고정으로 넘어오는 parameter가 존재한다
        // https://www.jqwidgets.com/jquery-widgets-documentation/documentation/jqxgrid/jquery-grid-cellsrendering.htm
        var cellsrenderer_correct = function (index, datafield, value, defaultvalue, column, rowdata) {
            var str_args = rowdata.MenuIdentity;
            return '<input class="btn btn-danger" style="width:80%; height:80%;" type="button" onClick="buttonclick_correct(\'' + str_args + '\')" id="btn_' + rowdata.MenuIdentity + '" value="' + rowdata.MenuName + '"/>'
        }

        var buttonclick_correct = function (value) {
            alert("rowdata.MenuIdentity : " + value);
        }

        var cellsbuttonclick_correct = function (row) {
            //var data = $('#grid').jqxGrid('getrowdata', row);
            alert("asdf");
        }

        var cellsrenderer_btn = function (index, datafield, value, defaultvalue, column, rowdata) {
            return 'Edit'
        }

        var cellsrenderer_edit = function (index, datafield, value, defaultvalue, column, rowdata) {
            var str_args = rowdata.MenuIdentity;
            return '<input class="btn btn-danger" style="width:80%; height:80%;" type="button" onClick="buttonclick_correct(\'' + str_args + '\')" id="btn_' + rowdata.MenuIdentity + '" value="' + rowdata.MenuName + '"/>'
        }

        var cellsrenderer_wrong = function (index, datafield, value, defaultvalue, column, rowdata) {
            //rowdataObject = cloneObject(rowdata);
            var rowdataObject = JSON.stringify(rowdata);

            //return '<input class="btn btn-primary" style="width:80%; height:80%;" type="button" onClick="buttonclick_wrong2(' + JSON.parse(rowdataObject) + ')" id="btn_Del_' + value + '" value="' + rowdata.MenuName + '"/>'
            return '<input class="btn btn-primary" style="width:80%; height:80%;" type="button" onClick="buttonclick_wrong2(\'' + rowdataObject + '\')" id="btn_Del_' + value + '" value="' + rowdata.MenuName + '"/>'
        }

        var buttonclick_wrong = function (rowdata) {
            alert("buttonclick_wrong");
            alert(rowdata.MenuIdentity + " :: " + rowdata.MenuName + " :: " + rowdata.Parent_MenuId + " :: " + rowdata.MenuArea + " :: " + rowdata.MenuController + " :: " + rowdata.MenuAction);
        }

        function fn_ObjectPassing() {
            //alert(args.MenuIdentity + " :: " + args.MenuName + " :: " + args.Parent_MenuId + " :: " + args.MenuArea + " :: " + args.MenuController + " :: " + args.MenuAction);
            alert("1");
        }

        var buttonclick_wrong2 = function () {
            alert("2");
        }

        function cloneObject(obj) {
            if (obj == null || typeof (obj) != 'object')
                return obj;

            var temp = new obj.constructor();
            for (var key in obj)
                temp[key] = cloneObject(obj[key]);

            return temp;
        }

        var test = '{ " menuidentity": "1", "user_duty": "", "menuname": "apptitle", "parent_menuid": "", "user_roll": "admin", "menuarea": "", "menucontroller": "home", "menuaction": "index", "use_yn": "y", "uid": "1", "boundindex": 0, "uniqueid": "2518-29-29-21-202829", "visibleindex": 0 }';

        $("#grid1").click(function (event) {
            alert(test); // true
        });
    </script>
}

<div style="display:none">
    @*display:none <- Must be required!*@
    @*<jqx-grid id="grid" alt-rows="true" show-status-bar="true" show-aggregates="false" filterable="true" pageable="true" auto-height="false" source-id="MenuId" sortable="true" height="650" width="100%" source="Model">*@
    <jqx-grid id="grid" alt-rows="true" selection-mode="multiplecellsadvanced" edit-mode="selectedcell" filterable="true" pageable="true" sortable="true" source-id-for="@(menu.MenuIdentity)" theme="@ViewData["Theme"]" edit="@Url.Action("Edit","MenuMastersController")" width="850" source="Model">
        <jqx-grid-columns>
            <jqx-grid-column cells-renderer="cellsrenderer_correct()" datafield-for="@(menu.MenuIdentity)" width="180" text="correct"></jqx-grid-column>
            <jqx-grid-column cells-renderer="cellsrenderer_btn()" button-click="cellsbuttonclick_correct()" datafield-for="@(menu.User_Auth)" width="180" text="click"></jqx-grid-column>
            @*<jqx-grid-column cells-renderer="delete_renderer()" datafield-for="@(menu.User_Duty)" width="180" text="Button"></jqx-grid-column>*@
            <jqx-grid-column cells-renderer="cellsrenderer_edit()" datafield-for="@(menu.Sort_Order)" width="180" text="edit"></jqx-grid-column>
            <jqx-grid-column column-group="name1" datafield-for="@(menu.MenuName)" width="150" text="MenuName"></jqx-grid-column>
            <jqx-grid-column column-group="name1" datafield-for="@(menu.Parent_MenuId)" width="150" text="ParentMenu"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.User_Roll)" width="150" text="Roll"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuArea)" width="150" text="Area"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuController)" width="150" text="Controller"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuAction)" width="150" text="Action"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.Use_Yn)" width="60" text="UseYn"></jqx-grid-column>
            <jqx-grid-column cells-renderer="cellsrenderer_wrong()" datafield-for="@(menu.User_Duty)" width="180" text="wrong"></jqx-grid-column>
        </jqx-grid-columns>
        <jqx-grid-column-groups>
            <jqx-grid-column-group name="name1" text="group1"></jqx-grid-column-group>
        </jqx-grid-column-groups>
    </jqx-grid>
</div>

@*<table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.MenuId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parent_MenuId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Roll)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Auth)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Duty)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuArea)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuController)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuAction)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Use_Yn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CssClass)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sort_Order)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedDate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent_MenuId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Roll)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Auth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Duty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuArea)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuController)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuAction)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Use_Yn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CssClass)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sort_Order)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.MenuIdentity">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.MenuIdentity">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.MenuIdentity">Delete</a>
                </td>
            </tr>
    }
        </tbody>
    </table>*@
<div style="display:none">
    <div id="grid1" style="background-color:red;height:60px;width:60px;"></div>
    <p>
        https://www.dofactory.com/tutorial/javascript-function-objects
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-documentation/documentation/asp-net-core/mvc-tag-helpers.htm?search=
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-demo/demos/jqxgrid/popupediting.htm?arctic
    </p>
    <p>
        https://www.jqwidgets.com/custom-grid-cells-rendering/
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/rowdata-value/
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-demo/demos/jqxgrid/computedcolumn.htm?light
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/rendering-issues-in-chrome/
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/available-parameters-for-renderer-function/
    </p>
    <p>
        https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers-documentation/documentation/jqxgrid/asp-net-core-tag-helper-grid-api.htm?search=
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/asp-net-mvc-5-_layout-and-index-problem/
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-documentation/documentation/asp.net-integration/asp.net-grid-server-side-editing.htm
    </p>
    <p>
        https://asp.net-hacker.rocks/2018/10/29/customizing-aspnetcore-09-actionfilters.html
    </p>
</div>