@model IEnumerable<PARK.APP.FIRST.Areas.SystemManage.Models.Menu.MenuMaster>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.TagHelpers
@addTagHelper *, jQWidgets.AspNetCore.Mvc.Bootstrap.TagHelpers
@{
    ViewData["Title"] = "Index";
    ViewData["Theme"] = "metro";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var menu = Model.FirstOrDefault();

    //List<string> groups = new List<string>() { "MenuController" };
}

<h2>Index</h2>
<h2>https://github.com/jqwidgets/Grid.AspNetCore.Mvc</h2>
<p>
    @Html.ActionLink("Razor AtcionLink(Create)", "Create", "MenuMasters", routeValues: null, htmlAttributes: new { @class = "btn btn-default", @role = "button" })
</p>
<div id="grid"></div>

@section scripts {
    <script type="text/javascript">
        var buttonclick = function (event) {
            var id = event.target.id;
            alert(id);
        }

        $("#Test1").jqxButton({ theme: 'metro', width: '150', height: '25' });

        $("#Test2").jqxButton({ theme: 'metro', width: '150', height: '25' });

        $("input[id^='file_']").jqxButton({ theme: 'metro' });

        // cellsrenderer 와 columnsrenderer(?) 는 모두 고정으로 넘어오는 parameter가 존재한다
        // https://www.jqwidgets.com/jquery-widgets-documentation/documentation/jqxgrid/jquery-grid-cellsrendering.htm
        var cellsrenderer_default = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.MenuIdentity;
            return '<input class="btn btn-danger" style="width:100%; height:100%;" type="button" onClick="cellsrenderer_default_fn(\'' + str_args + '\')" id="btn_' + rowdata.MenuIdentity + '" value="' + rowdata.MenuName + '"/>'
        }

        var cellsrenderer_default2 = function (index, datafield, value, defaultvalue, column, rowdata) {
            var rowdataObject = JSON.stringify(rowdata);
            var str_args = rowdata.MenuIdentity;
            return '<input class="btn btn-danger" style="width:80%; height:80%;" type="button" onClick="cellsrenderer_default_fn(\'' + str_args + '\')" id="btn_' + rowdata.MenuIdentity + '" value="' + rowdata.MenuName + '"/>'
        }

        var cellsrenderer_default_fn = function (value) {
            alert("rowdata.MenuIdentity : " + value);
        }

        var cellsrenderer_btn = function (index, datafield, value, defaultvalue, column, rowdata) {
            return 'Edit'
            // Add style
            //return '<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" data-whatever="">Edit</button>';
        }

        var cellsbuttonclick_btn = function () {
            //var data = $('#grid').jqxGrid('getrowdata', row);
            //alert(data.MenuName);
            alert("xxx");
        }

        function cellsbuttonclick_btn2() {
            alert("xxx");
        }

        function cloneObject(obj) {
            if (obj == null || typeof (obj) != 'object')
                return obj;

            var temp = new obj.constructor();
            for (var key in obj)
                temp[key] = cloneObject(obj[key]);

            return temp;
        }

        var test = '{ " menuidentity": "1", "user_duty": "", "menuname": "apptitle", "parent_menuid": "", "user_roll": "admin", "menuarea": "", "menucontroller": "home", "menuaction": "index", "use_yn": "y", "uid": "1", "boundindex": 0, "uniqueid": "2518-29-29-21-202829", "visibleindex": 0 }';

        $("#grid1").click(function (event) {
            alert(test); // true
        });

        var template = { rowDetails: "<div style=\"margin: 10px;\"></div>", rowDetailsHeight: 220, rowDetailsHidden: true };
        var initRowDetails = function (index, parentElement, gridElement, record) {
            var id = record.uid.toString();
            var grid = $($(parentElement).children()[0]);
            var data = [];
            var generaterow = function (i) {
                var row = {};
                row["OrderDate"] = new Date(2016, Math.floor(Math.random() * 11), Math.floor(Math.random() * 27))
                row["Quantity"] = Math.floor(Math.random() * 50)
                row["ProductName"] = record.ProductName;
                return row;
            }
            for (var i = 0; i < Math.max(10, Math.floor(Math.random() * 20)); i++) {
                var row = generaterow(i);
                data[i] = row;
            }
            var source = {
                datafields: [
                    { name: 'OrderDate', type: 'date' },
                    { name: 'Quantity', type: 'string' },
                    { name: 'ProductName', type: 'string' }
                ],
                localdata: data
            }
            var nestedGridAdapter = new $.jqx.dataAdapter(source);
            if (grid != null) {
                grid.jqxGrid({
                    source: nestedGridAdapter, width: 780, height: 200,
                    columns: [
                        { text: 'Order Date', cellsFormat: 'd', dataField: 'OrderDate', width: 200 },
                        { text: 'Quantity', cellsAlign: 'right', dataField: 'Quantity', width: 200 },
                        { text: 'Product Name', dataField: 'ProductName' }
                    ]
                });
            }
        }

        var jqxGridInstance = {};
        function exportExcel() {
            jqxGridInstance.exportdata("xls", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function htmlExport() {
            jqxGridInstance.exportdata("html", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function csvExport() {
            jqxGridInstance.exportdata("csv", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function pdfExport() {
            jqxGridInstance.exportdata("pdf", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function tsvExport() {
            jqxGridInstance.exportdata("tsv", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function xmlExport() {
            jqxGridInstance.exportdata("xml", "Grid", true, null, true, '@Url.Action("ExportData", "MenuMasters")');
        }
        function gridInstance(instance) {
            jqxGridInstance = instance;
        }
    </script>
}

<div style="display:none">
    @*display:none <- Must be required!*@
    @*<jqx-grid id="grid" alt-rows="true" show-status-bar="true" show-aggregates="false" filterable="true" pageable="true" auto-height="false" source-id="MenuId" sortable="true" height="650" width="100%" source="Model">*@
    @*edit="@Url.Action("Edit","MenuMastersController")" alt-rows="true" selection-mode="multiplecellsadvanced" edit-mode="selectedcell" *@
    @*<jqx-grid id="grid" filterable="true" show-default-load-element="true" pageable="true" sortable="true" source-id-for="@(menu.MenuIdentity)" theme="@ViewData["Theme"]" width="850" source="Model">*@
    @*groupable="true" groups="@(groups)"*@
    <jqx-grid id="grid" row-details="true" show-filter-row="true" row-details-template="{{template}}" init-row-details="initRowDetails()" server-processing="true" alt-rows="true" filterable="true" pageable="true" auto-height="true" source-id="@(menu.MenuIdentity)" theme="@ViewData["Theme"]" sortable="true" width="100%" source-root="MenuMasters" source-total-records="TotalRecords" source-url="@Url.Action("GetPageData","MenuMasters")" source-model="menu">
        <jqx-grid-columns>
            <jqx-grid-column cells-renderer="cellsrenderer_default()" datafield-for="@(menu.MenuIdentity)" width="180" text="Default"></jqx-grid-column>
            <jqx-grid-column column-group="name1" datafield-for="@(menu.MenuName)" width="150" text="MenuName"></jqx-grid-column>
            <jqx-grid-column column-group="name1" datafield-for="@(menu.Parent_MenuId)" width="150" text="ParentMenu"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.User_Roll)" width="150" text="Roll"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuArea)" width="150" text="Area"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuController)" width="150" text="Controller"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.MenuAction)" width="150" text="Action"></jqx-grid-column>
            <jqx-grid-column datafield-for="@(menu.Use_Yn)" width="60" text="UseYn"></jqx-grid-column>
            <jqx-grid-column cells-renderer="cellsrenderer_btn()" datafield-for="@(menu.User_Auth)" button-click="cellsbuttonclick_btn()" column-type="button" width="180" text="click"></jqx-grid-column>
        </jqx-grid-columns>
        <jqx-grid-column-groups>
            <jqx-grid-column-group name="name1" text="group1"></jqx-grid-column-group>
        </jqx-grid-column-groups>
    </jqx-grid>
</div>
<br />
    a tag : <a asp-action="Create" class='btn btn-default'>Create New</a>
<br />
    jqx-button : <jqx-button theme="metro" on-click="@Url.Action("Create", "MenuMastersController")">Create Button</jqx-button>
<br />
    button tag : <button type='button' class='btn btn-default' data-placement="top" on-click="@Url.Action("Create", "MenuMastersController")">Create Button</button>
<br />
    input tag : <input type="button" onclick="alert('Apply');" id="Test1" value="jqxButton Theme Apply" />
<br />
    input tag : <input type="button" id="Test2" value="Url.Action" onclick="@Url.Action("Create", "MenuMastersController")" />
<br />
<p>
    https://www.jqwidgets.com/community/topic/export-multiple-jqxgrids-to-excel-on-single-button-click/
</p>
<input type="button" onclick="exportExcel()" id="file_Excel" value="Excel" />
<input type="button" onclick="htmlExport()" id="file_Html" value="Html" />
<input type="button" onclick="csvExport()" id="file_Csv" value="Csv" />
<input type="button" onclick="xmlExport()" id="file_Xml" value="Xml" />
<input type="button" onclick="pdfExport()" id="file_Pdf" value="Pdf" />
<input type="button" onclick="tsvExport()" id="file_Tsv" value="Tsv" />

@*<table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.MenuId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Parent_MenuId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Roll)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Auth)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.User_Duty)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuArea)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuController)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MenuAction)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Use_Yn)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CssClass)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sort_Order)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedDate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent_MenuId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Roll)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Auth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User_Duty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuArea)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuController)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MenuAction)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Use_Yn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CssClass)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sort_Order)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.MenuIdentity">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.MenuIdentity">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.MenuIdentity">Delete</a>
                </td>
            </tr>
    }
        </tbody>
    </table>*@
<div style="display:none">
    <div id="grid1" style="background-color:red;height:60px;width:60px;"></div>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="exportExcel()">Excel Export</jqx-button>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="htmlExport()">HTML Export</jqx-button>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="csvExport()">CSV Export</jqx-button>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="xmlExport()">XML Export</jqx-button>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="pdfExport()">PDF Export</jqx-button>
    <jqx-button style="margin-top:20px;" theme="@ViewData["Theme"]" on-click="tsvExport()">TSV Export</jqx-button>
    <p>
        https://www.dofactory.com/tutorial/javascript-function-objects
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-documentation/documentation/asp-net-core/mvc-tag-helpers.htm?search=
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-demo/demos/jqxgrid/popupediting.htm?arctic
    </p>
    <p>
        https://www.jqwidgets.com/custom-grid-cells-rendering/
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/rowdata-value/
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-demo/demos/jqxgrid/computedcolumn.htm?light
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/rendering-issues-in-chrome/
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/available-parameters-for-renderer-function/
    </p>
    <p>
        https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers-documentation/documentation/jqxgrid/asp-net-core-tag-helper-grid-api.htm?search=
    </p>
    <p>
        https://www.jqwidgets.com/community/topic/asp-net-mvc-5-_layout-and-index-problem/
    </p>
    <p>
        https://www.jqwidgets.com/jquery-widgets-documentation/documentation/asp.net-integration/asp.net-grid-server-side-editing.htm
    </p>
    <p>
        https://asp.net-hacker.rocks/2018/10/29/customizing-aspnetcore-09-actionfilters.html
    </p>
</div>